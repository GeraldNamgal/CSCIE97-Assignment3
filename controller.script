# Create ledger
Create-ledger ledger description "for blockchaining" seed "CSCIE-97"

# Define store 1
define store store1 name "Harvard Square Store" address "1400 Mass Avenue, Cambridge, MA 02138"

# Define store 1's Blockchain account
create-account store1

# Define aisle 1
define aisle store1:aisle1 name Milks description "milk, yogurt, and other dairy-like products" location floor

# Define aisle 2
define aisle store1:aisle2 name "Breads and Grains" description "breads, grains, wheat" location floor

# Define aisle 3
define aisle store1:aisle3 name Drinks description "canned and room temperature" location floor

# Define aisle 5 (storeroom)
define aisle store1:aisle5 name Miscellaneous description "random stuff" location storeroom

# Define shelf 1 (in aisle 1)
define shelf store1:aisle1:shelf1 name Milks level high description "regular, soy, and almond" temperature refrigerated

# Define shelf 1 (in aisle 5 [storeroom])
define shelf store1:aisle5:shelf1 name Milks level high description "regular, soy and almond" temperature refrigerated

# Define shelf 2 (in aisle 2)
define shelf store1:aisle2:shelf2 name "Cereals" level high description "cereal and oatmeal"

# Define shelf 2 (in aisle 5 [storeroom])
define shelf store1:aisle5:shelf2 name "Cereals" level high description "cereal and oatmeal"

# Define product 1
define product product1 name "Soya Drink" description "soy milk brand" size "2 lbs" category "milk" unit_price 35 temperature refrigerated

# Define inventory 1 (on shelf 1 in aisle 1)
define inventory inventory1 location store1:aisle1:shelf1 capacity 30 count 30 product product1

# Define inventory 2 (on shelf 1 in aisle 5 [storeroom])
define inventory inventory2 location store1:aisle5:shelf1 capacity 30 count 30 product product1

# Define product 2
define product product2 name "Almond Drank" description "almond milk brand" size "2 lbs" category "milk" unit_price 40 temperature refrigerated

# Define inventory 3 (on shelf 1 in aisle 1)
define inventory inventory3 location store1:aisle1:shelf1 capacity 40 count 40 product product2

# Define inventory 4 (on shelf 1 in aisle 5 [storeroom])
define inventory inventory4 location store1:aisle5:shelf1 capacity 40 count 40 product product2

# Define product 3
define product product3 name "Crunchy Cereal" description "breakfast cereal" size "1 lbs" category "breakfast food" unit_price 27

# Define inventory5 (on shelf 2 in aisle 2)
define inventory inventory5 location store1:aisle2:shelf2 capacity 35 count 35 product product3

# Define inventory6 (on shelf 2 in aisle 5 [storeroom])
define inventory inventory6 location store1:aisle5:shelf2 capacity 35 count 35 product product3

# Define customer 1 (registered customer)
define customer customer1 first_name John last_name Jones age_group adult type registered email_address john.j@jmail.com account john

# Create customer 1's Blockchain account
create-account customer1

# Fund customer 1's Blockchain account
process-transaction 0 amount 2000 fee 10 payload "fund account" payer master receiver customer1

# Define customer 2 (a guest)
define customer customer2 first_name Stephanie last_name Jones age_group child type guest email_address steph.j@jmail.com account stephanie

# Define customer 3 (registered customer)
define customer customer3 first_name Mark last_name Jones age_group adult type registered email_address mark.j@jmail.com account mark

# Create customer 3's Blockchain account
create-account customer3

# Fund customer 3's Blockchain account
process-transaction 1 amount 2000 fee 10 payload "fund account" payer master receiver customer3

# Define customer 4 (registered customer)
define customer customer4 first_name Mary last_name Stein age_group adult type registered email_address mary.s@jmail.com account mary

# Create customer 4's Blockchain account
create-account customer4

# Fund customer 4's Blockchain account
process-transaction 2 amount 2000 fee 10 payload "fund account" payer master receiver customer4

# Define customer 5 (registered customer)
define customer customer5 first_name Joseph last_name McAllister age_group adult type registered email_address joseph.m@jmail.com account joseph

# Create customer 5's Blockchain account
create-account customer5

# Fund customer 5's Blockchain account
process-transaction 3 amount 2000 fee 10 payload "fund account" payer master receiver customer5

# Define customer 6 (registered customer)
define customer customer6 first_name Stan last_name Jenkins age_group adult type registered email_address stan.j@jmail.com account stan

# Create customer 6's Blockchain account
create-account customer6

# Fund customer 6's Blockchain account
process-transaction 4 amount 2000 fee 10 payload "fund account" payer master receiver customer6

# Define customer 7 (registered customer)
define customer customer7 first_name Jalina last_name White age_group adult type registered email_address jalina.w@jmail.com account jalina

# Create customer 7's Blockchain account
create-account customer7

# Fund customer 7's Blockchain account
process-transaction 5 amount 2000 fee 10 payload "fund account" payer master receiver customer7

# Define customer 8 (registered customer)
define customer customer8 first_name Sebastian last_name Kim age_group adult type registered email_address sebastian.k@jmail.com account sebastian

# Create customer 8's Blockchain account
create-account customer8

# Fund customer 8's Blockchain account
process-transaction 6 amount 2000 fee 10 payload "fund account" payer master receiver customer8

# Define customer 9 (registered customer)
define customer customer9 first_name Lisa last_name Ford age_group adult type registered email_address lisa.f@jmail.com account lisa

# Create customer 9's Blockchain account
create-account customer9

# Fund customer 9's Blockchain account
process-transaction 7 amount 2000 fee 10 payload "fund account" payer master receiver customer9

# Define customer 10 (registered customer)
define customer customer10 first_name Art last_name Weyl age_group adult type registered email_address art.w@jmail.com account art

# Create customer 10's Blockchain account
create-account customer10

# Fund customer 10's Blockchain account
process-transaction 8 amount 2000 fee 10 payload "fund account" payer master receiver customer10

# Define customer 11 (registered customer)
define customer customer11 first_name Karen last_name Peterson age_group adult type registered email_address karen.p@jmail.com account karen

# Create customer 11's Blockchain account
create-account customer11

# Fund customer 11's Blockchain account
process-transaction 9 amount 2000 fee 10 payload "fund account" payer master receiver customer11

# Define camera 1
define device camera1 name "camera 1" type camera location store1:aisle1

# Define camera 2
define device camera2 name "camera 2" type camera location store1:aisle2

# Define camera 3
define device camera3 name "camera 3" type camera location store1:aisle3

# Define camera 4
define device camera4 name "camera 4" type camera location store1:null

# Define camera 5
define device camera5 name "camera 5" type camera location store1:aisle5

# Define microphone 1
define device microphone1 name "microphone 1" type microphone location store1:aisle1

# Define microphone 2
define device microphone2 name "microphone 2" type microphone location store1:aisle2

# Define microphone 3
define device microphone3 name "microphone 3" type microphone location store1:aisle3

# Define microphone 4
define device microphone4 name "microphone 4" type microphone location store1:null

# Define turnstile 1
define device turnstile1 name "turnstile 1" type turnstile location store1:null

# Define turnstile 2
define device turnstile2 name "turnstile 2" type turnstile location store1:null

# Define turnstile 3
define device turnstile3 name "turnstile 3" type turnstile location store1:null

# Define speaker 1
define device speaker1 name "speaker 1" type speaker location store1:aisle1

# Define speaker 2
define device speaker2 name "speaker 2" type speaker location store1:aisle2

# Define speaker 3
define device speaker3 name "speaker 3" type speaker location store1:aisle3

# Define robot 1
define device robot1 name "robot 1" type robot location store1:null

# Define robot 2
define device robot2 name "robot 2" type robot location store1:null

# Define robot 3
define device robot3 name "robot 3" type robot location store1:null

# Create emergency event
create event camera1 event "emergency fire aisle1"

# Show store 1
show store store1

# Enter Store event for customer1 (registered customer)
create event turnstile2 event "enter_store customer1"

# Enter Store event for customer2 (a guest)
create event turnstile2 event "enter_store customer2"

# Customer Seen event for customer 1
create event camera1 event "customer_seen customer1 aisle1"

# Basket Items event (customer 1 adds 6 of product 1 to their basket)
create event camera1 event "basket_items customer1 add product1 6 aisle1:shelf1"

# Show store 1 (count for product 1's inventory [inventory2] in aisle 5 [storeroom] should be 24)
show store store1

# Show customer 1's basket items (should have 6 of product1)
show basket_items customer1

# Basket Items event (customer 1 removes 6 of product 1 from their basket)
create event camera1 event "basket_items customer1 remove product1 6 aisle1:shelf1"

# Show store 1 (count for product 1's inventory [inventory2] in aisle 5 [storeroom] should be back to 30)
show store store1

# Show customer 1's basket items (should be empty)
show basket_items customer1

# Clean event
create event camera1 event "clean product1 aisle1"

# Broken Glass event
create event microphone2 event "broken_glass aisle2"

# Customer Seen event for customer 2
create event camera3 event "customer_seen customer2 aisle3"

# Missing Person event
create event microphone1 event "missing_person customer2"

# Customer Seen event for customer 1
create event camera3 event "customer_seen customer1 aisle3"

# Show customer 1
show customer customer1

# Show customer 2
show customer customer2

# Fetch Product event
create event microphone3 event "fetch_product product2 6 aisle1:shelf1 customer1"

# Show store (aisle1:shelf1 should have 34 of product2)
show store store1

# Show customer 1's basket items (should have 6 of product2)
show basket_items customer1

# Account Balance event for customer1
create event microphone3 event "account_balance customer1"

# Show product2 (unit price should be 1/6 of total value of customer 1's basket items)
show product product2

# Checkout event for customer 1 (a registered customer with basket items)
create event turnstile1 event "checkout customer1"

# Checkout event for customer 2 (a guest)
create event turnstile1 event "checkout customer2"

# TODO: Checkout event for customer 3 (a registered customer with no basket items)

# Show customer 1 (should be out of store1 ["null" location])
show customer customer1

# Show customer 2 (should be out of store1 ["null" location])
show customer customer2

# Show store 1 (customer 1 and customer 2 should not be shown as "active customers")
show store store1

# Get block 2 from ledger (customer 1's transaction should be first transaction)
get-block 2

# Error: Attempt to have an unregistered person enter the store
create event turnstile2 event "enter_store unknownPerson"

# Checkout event for an unregistered person (any person who doesn't have unpaid items should be able to exit store [fire hazard, etc.])
create event turnstile1 event "checkout unknownPerson"
